# 중첩된 배열을 매개변수로 받아 각 하위 배열에서 정확히 하나의 요소를 가지는 고유 배열의 수를 반환하는 함수를 작성하세요.

# 예시): solve([[1,2],[4],[5,6]])은 4개의 배열이 생성가능합니다.([1,4,5],[1,4,6],[2,4,5],[2,4,6]).

# 중복은 카운트에 포함하지 않습니다.
# [[1,2],[4],[5,6]] -> 4
# [[1,2],[4,4],[5,6,6]] -> 4
# [[1,2],[3,4],[5,6]] -> 8
# [[1,2,3],[3,4,6,6,7],[8,9,10,12,5,6]] -> 72

# 풀이
# 내부 배열1에서 겹치지 않는 수의 갯수 * 내부 배열2에서 겹치지 않는 수의 갯수 * ~~ 내부 배열n 에서 겹치지 않는 수의 갯수
# 배열 내부에 요소 갯수 카운트, 배열 내부에 distinct 한 숫자 갯수
# a[0].count(1) 내부배열의 카운트

# a[2][3] 이중 리스트 안의 값
# list2 = [[0]*11 for i in range(m)]

def mutliarray_make():
    n = int(input('내부 배열수를 입력하세요 :'))
    list_2=[]
    list_1 = [list_2 for number in range(n)]
    multiple_result = 1 #계산 결과 객체

    for i in range (n):
        k = 0
        m =int(input('내부 배열 요소 갯수'))
        list_2 = [0 for number in range(m)]

        while j < m:
            list_2[j] = int(input('내부 배열 요소 값:'))
            j = j+1
        list_1[1] = list_2
        if i == n:
            break
        multiple_result= multiple_result * len(set(list_1[i]))

    return multiple_result

# 적당한 객체를 입력하는 함수
def multiarray_input(a=[[]]):
    i = 0
    multiple_result = 1
    for i in range(len(a)):
        multiple_result = multiple_result * len(set(a[i]))
    return multiple_result
    
########################################################################## 퀴즈에 있는 함수를 테스트하기
#함수를 테스트할때 'unittest'를 이용할 수 있다. 
#결과값을 self.assert*() 메서드를 사용하여 확인한다.
#여기서는  self.assertEqual을 이용했다. 함수, 입력값, 출력값을 적어두면 된다.

import unittest
from Quiz_multiarray_Day2 import multiarray_input


class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(multiarray_input([[1, 2], [4], [5, 6]]), 4)

    def test_2(self):
        self.assertEqual(multiarray_input([[1, 2], [4, 4], [5, 6, 6]]), 4)

    def test_3(self):
        self.assertEqual(multiarray_input([[1, 2], [3, 4], [5, 6]]), 8)

    def test_4(self):
        self.assertEqual(multiarray_input([[1, 2, 3], [3, 4, 6, 6, 7], [8, 9, 10, 12, 5, 6]]), 72)


if __name__ == '__main__':
    unittest.main()

